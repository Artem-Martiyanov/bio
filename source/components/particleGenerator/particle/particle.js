import './particle.css'const generateRandomNum = (min, max) => Math.round(min - 0.5 + Math.random() * (max - min + 1))const createParticle = (size, sizeDispersion, color) => {  if (size <= sizeDispersion) {    throw new Error(`sizeDispersion: ${sizeDispersion} should not be more than size: ${size}`)  }  const particle = document.createElement('div')  const delta = generateRandomNum(-2, 2)  particle.classList.add('particle')  particle.style.width = size + delta + 'px'  particle.style.height = size + delta + 'px'  particle.style.background = color  return particle}export class Particle {  constructor(size, sizeDispersion, innerRadius, outerRadius, color) {    this.innerRadius = innerRadius    this.outerRadius = outerRadius    this.particle = createParticle(size, sizeDispersion, color)    this.parent = document.querySelector('[data-particle-effect]')    this.parent.insertAdjacentElement('afterbegin', this.particle)    window.setTimeout(() => this.#move(), 1)    this.particle.addEventListener('transitionend', this.#destroy)  }    #move() {    const getRand = () => {      const result = generateRandomNum(this.innerRadius, this.outerRadius)      const probability = generateRandomNum(0, 100)      if (probability > 50) {        return result * -1      } else {        return result      }    }            const dX = getRand()    const dY = getRand()        this.particle.style.transform = `translate(${dX}vw, ${dY}vh)`    this.particle.style.opacity = '0'  }    #destroy(e) {    if (e.target.parentNode) {      e.target.parentNode.removeChild(e.target)    }  }}